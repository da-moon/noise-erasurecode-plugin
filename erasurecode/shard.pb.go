// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: erasurecode/shard.proto

package erasurecode

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Shard struct {
	FileSignature         []byte   `protobuf:"bytes,1,opt,name=file_signature,json=fileSignature,proto3" json:"file_signature,omitempty"`
	ShardData             []byte   `protobuf:"bytes,2,opt,name=shard_data,json=shardData,proto3" json:"shard_data,omitempty"`
	ShardNumber           uint64   `protobuf:"varint,3,opt,name=shard_number,json=shardNumber,proto3" json:"shard_number,omitempty"`
	TotalShards           uint64   `protobuf:"varint,4,opt,name=total_shards,json=totalShards,proto3" json:"total_shards,omitempty"`
	MinimumRequiredShards uint64   `protobuf:"varint,5,opt,name=minimum_required_shards,json=minimumRequiredShards,proto3" json:"minimum_required_shards,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Shard) Reset()         { *m = Shard{} }
func (m *Shard) String() string { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()    {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_shard_2c97d40f8e75f3fc, []int{0}
}
func (m *Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(dst, src)
}
func (m *Shard) XXX_Size() int {
	return m.Size()
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetFileSignature() []byte {
	if m != nil {
		return m.FileSignature
	}
	return nil
}

func (m *Shard) GetShardData() []byte {
	if m != nil {
		return m.ShardData
	}
	return nil
}

func (m *Shard) GetShardNumber() uint64 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func (m *Shard) GetTotalShards() uint64 {
	if m != nil {
		return m.TotalShards
	}
	return 0
}

func (m *Shard) GetMinimumRequiredShards() uint64 {
	if m != nil {
		return m.MinimumRequiredShards
	}
	return 0
}

func init() {
	proto.RegisterType((*Shard)(nil), "erasurecode.Shard")
}
func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileSignature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.FileSignature)))
		i += copy(dAtA[i:], m.FileSignature)
	}
	if len(m.ShardData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.ShardData)))
		i += copy(dAtA[i:], m.ShardData)
	}
	if m.ShardNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.ShardNumber))
	}
	if m.TotalShards != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.TotalShards))
	}
	if m.MinimumRequiredShards != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.MinimumRequiredShards))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Shard) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileSignature)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.ShardData)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.ShardNumber != 0 {
		n += 1 + sovShard(uint64(m.ShardNumber))
	}
	if m.TotalShards != 0 {
		n += 1 + sovShard(uint64(m.TotalShards))
	}
	if m.MinimumRequiredShards != 0 {
		n += 1 + sovShard(uint64(m.MinimumRequiredShards))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSignature = append(m.FileSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FileSignature == nil {
				m.FileSignature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardData = append(m.ShardData[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardData == nil {
				m.ShardData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNumber", wireType)
			}
			m.ShardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShards", wireType)
			}
			m.TotalShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRequiredShards", wireType)
			}
			m.MinimumRequiredShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumRequiredShards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("erasurecode/shard.proto", fileDescriptor_shard_2c97d40f8e75f3fc) }

var fileDescriptor_shard_2c97d40f8e75f3fc = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x41, 0x4a, 0xc5, 0x30,
	0x10, 0x40, 0x89, 0xfe, 0x2f, 0x98, 0x5f, 0x5d, 0x04, 0xa4, 0xd9, 0x58, 0xaa, 0x20, 0x74, 0xa5,
	0x0b, 0xc1, 0x03, 0x88, 0x6b, 0x17, 0xed, 0x01, 0xc2, 0xd4, 0x8c, 0x1a, 0x68, 0x1a, 0x9d, 0x24,
	0x77, 0x14, 0xdc, 0x78, 0x04, 0xe9, 0x49, 0xa4, 0xd3, 0x16, 0xdc, 0xbe, 0xf7, 0x66, 0x98, 0x91,
	0x25, 0x12, 0xc4, 0x4c, 0xf8, 0x12, 0x2c, 0xde, 0xc5, 0x77, 0x20, 0x7b, 0xfb, 0x41, 0x21, 0x05,
	0x75, 0xf8, 0x27, 0xae, 0xbf, 0x85, 0xdc, 0x77, 0xb3, 0x54, 0x37, 0xf2, 0xfc, 0xd5, 0x0d, 0x68,
	0xa2, 0x7b, 0x1b, 0x21, 0x65, 0x42, 0x2d, 0x6a, 0xd1, 0x14, 0xed, 0xd9, 0x4c, 0xbb, 0x0d, 0xaa,
	0x4b, 0x29, 0x79, 0x99, 0xb1, 0x90, 0x40, 0x1f, 0x71, 0x72, 0xca, 0xe4, 0x09, 0x12, 0xa8, 0x2b,
	0x59, 0x2c, 0x7a, 0xcc, 0xbe, 0x47, 0xd2, 0xc7, 0xb5, 0x68, 0x76, 0xed, 0x81, 0xd9, 0x33, 0xa3,
	0x39, 0x49, 0x21, 0xc1, 0x60, 0x18, 0x46, 0xbd, 0x5b, 0x12, 0x66, 0x7c, 0x4a, 0x54, 0x0f, 0xb2,
	0xf4, 0x6e, 0x74, 0x3e, 0x7b, 0x43, 0xf8, 0x99, 0x1d, 0xa1, 0xdd, 0xea, 0x3d, 0xd7, 0x17, 0xab,
	0x6e, 0x57, 0xbb, 0xcc, 0x3d, 0x16, 0x5f, 0x53, 0x25, 0x7e, 0xa6, 0x4a, 0xfc, 0x4e, 0x95, 0xe8,
	0x4f, 0xf8, 0xdf, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x6e, 0x8d, 0x3d, 0x0a, 0x01,
	0x00, 0x00,
}
